diff -u -r -N a/alertmanager/asset/assets_vfsdata.go b/alertmanager/asset/assets_vfsdata.go
--- a/alertmanager/asset/assets_vfsdata.go	2025-03-07 06:04:46.000000000 -0800
+++ b/alertmanager/asset/assets_vfsdata.go	2025-03-11 20:28:46.358957176 -0700
@@ -161,9 +161,9 @@
 		"/templates/default.tmpl": &vfsgen۰CompressedFileInfo{
 			name:             "default.tmpl",
 			modTime:          time.Date(1970, 1, 1, 0, 0, 1, 0, time.UTC),
-			uncompressedSize: 8101,
+			uncompressedSize: 8504,
 
-			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xec\x59\xcf\x6f\xeb\x36\x0c\xbe\xe7\xaf\x20\xfc\x76\x68\x0e\xf5\x1b\x76\x2c\x50\x0c\x0f\xc3\x7e\x1c\xba\x61\x68\xd1\x5d\x86\x21\x50\x6d\xc6\x55\x2b\x4b\xae\x44\x27\x0d\xd2\xfc\xef\x83\x6c\xc7\x91\x2d\x27\x91\xd3\xec\xb4\xdc\x12\x99\xfc\x48\x7f\x1f\x4d\xca\xf2\x7a\x0d\x29\xce\xb9\x44\x88\x66\x33\x26\x50\x53\xce\x24\xcb\x50\x47\xb0\xd9\x7c\x73\xfe\xaf\xd7\x80\x32\x85\xcd\x66\xb2\xd7\xe5\xf1\xfe\xce\x7a\xad\xd7\x10\xff\xfc\x4e\xa8\x25\x13\x8f\xf7\x77\xb0\xd9\x7c\xfd\xf2\xb5\xb2\x33\x3f\x6a\x4c\x90\x2f\x50\xdf\x5a\xa3\xfb\xe6\x0f\x7c\x40\xa9\xc5\x5b\x89\x7a\x55\xbb\x37\x81\xba\x91\x4c\xf9\xf4\x82\x09\xd9\x08\x7f\x5b\xef\x07\x62\x54\x1a\xf8\x00\x52\x8f\x45\x81\xba\x76\xe5\x73\xc0\xb7\xf6\x62\x34\xe7\x9a\xcb\xcc\xfa\xdc\x58\x9f\xea\x86\x4c\xfc\x4b\xb5\x0a\x1f\x20\x50\xba\x11\xff\x01\x6b\xf4\xab\x56\x65\x71\xc7\x9e\x50\x98\xf8\x41\x69\xc2\xf4\x4f\xc6\xb5\x89\xff\x62\xa2\x44\x1b\xf0\x45\x71\x09\x11\x58\x54\xa8\x43\x66\x04\x57\x16\x2b\xfe\x49\xe5\xb9\x92\xb5\xf3\xb4\x59\x73\xf0\xa6\xb0\xd9\x5c\xad\xd7\xb0\xe4\xf4\xdc\x35\x8e\xef\x31\x57\x0b\xec\x46\xff\x83\xe5\x68\x1a\x46\x87\xa2\xb7\x89\x4f\xdb\x5f\x7b\x64\x4a\xd1\x24\x9a\x17\xc4\x95\x8c\x0e\x70\x4c\xf8\x4e\xb5\xa4\x33\xc1\x0d\x35\xa6\x9a\xc9\x0c\x21\x86\xcd\xa6\xce\xeb\x66\xb2\x5b\xf4\x79\xb2\xac\x5c\x57\x44\xda\xf4\xed\xbf\x5b\x68\x6f\xa0\x49\xac\x0e\xfe\x4d\x4a\x45\xcc\xe6\xd4\x81\x74\x96\x4f\xc3\x7d\x50\xa5\x4e\xf0\xa6\x16\x13\x25\x6a\x46\x4a\xd7\x95\x38\x19\x20\xea\x20\x05\xb3\x9c\xe9\xd7\x54\x2d\xa5\xc7\xc5\x24\x94\x8c\xc0\xac\x27\xe3\xe9\x08\x45\x0e\x22\x64\x32\xcc\x88\x11\x2c\x79\x8d\x53\x9c\xb3\x52\x50\x4c\x9c\x04\x36\x54\x10\xe6\x85\x60\xd4\x7d\x38\xe3\x7d\x35\xd8\xc5\x29\x8d\x6d\x0f\xf9\x10\x54\xb7\x09\x05\xe2\xcd\x99\x10\x4f\x2c\x79\xf5\xf0\x06\xd3\xb7\xa0\xf0\x01\xc7\x0c\x05\x97\xaf\xc1\x19\x24\x4d\x06\x3c\x8d\xc2\x1c\x0a\x8d\xb6\xd6\x02\xad\x9d\x84\x0e\x32\x56\xf5\xe0\xc0\x94\x79\xa2\x24\xe6\xea\x85\x47\xe1\xf6\xa5\x16\xa1\x19\x87\xdf\xdc\x5c\x29\xaa\x27\x8e\x53\x83\xae\x79\x61\x6f\x2d\x2d\x69\xd5\xba\xf8\x0d\x6d\x5c\x39\xfa\x88\x89\xe0\x28\xe9\xf4\x82\xdc\x87\xb8\x9b\x8a\xa7\x69\xe6\xe3\x72\x69\x88\xc9\x04\xcd\x00\xae\xd7\xc1\xe3\xfd\xac\xaa\xc2\x64\x28\x39\xb6\xc0\x39\x1a\xc3\xb2\xd3\x9e\x6f\x0f\xcc\x57\xa8\x19\x78\x7b\x1a\xda\xe0\x84\x9b\xf4\xe6\x6b\x67\x80\x4f\xe1\x7b\xb8\xb6\x8d\xb3\x5a\x84\x7a\xb1\x6a\x9d\x87\x19\xe9\xee\x02\xaa\x20\xd7\xce\x1d\x0d\xc4\xbb\x47\xa3\xc4\x02\xd3\x5e\xc4\xed\x72\x78\xcc\xad\x87\x17\xf5\x3a\x84\x52\x53\xf5\xf1\xf1\xd5\xd4\x51\x7d\x89\xc9\x33\xa3\xb1\x9a\x4f\x2e\xfa\x1d\xd0\xcf\xdd\x28\x3f\x6a\xe1\xe1\x0d\xea\xb3\x47\xf5\x9e\x3e\xa4\x66\x76\x58\xee\xed\xa4\xbe\x79\xc1\x34\xad\x46\xd8\x13\xcb\x42\xad\x59\x86\x92\x66\xfd\x11\xd7\xad\xaf\x05\x4f\x48\x69\x55\x98\x5d\xd9\x12\x23\x9c\x75\x0b\xed\x52\x4b\xe3\x7a\x81\xcf\x2a\x4a\xe2\xb4\x9a\xa5\xdc\x14\x82\xad\x66\x7b\x76\x53\xc7\x1b\xb7\x8f\x9c\x2b\xc9\x49\x59\x42\x66\xa4\x94\x18\x39\x12\x3b\xb3\xab\x34\xcf\x6a\x81\xfa\x0c\xfb\x47\x0f\xea\xbf\xaf\xa7\xf3\x94\x53\x78\x35\x9d\xaf\x98\xfc\x2d\xfd\x21\x26\x77\x7b\xba\x31\x33\xc5\xdd\xcd\x49\xe7\x61\xdf\xbd\xa6\x8f\x7f\x47\x70\x70\x2e\xf2\x8e\x91\xd7\x65\x91\x50\x60\xa6\x59\x3e\x44\xe5\xff\x96\x94\x94\x9b\x44\xe9\x74\xb7\x37\x57\x92\x76\xdb\x7d\xbf\x14\xfb\xf6\xa7\x37\xae\x3e\xd2\x45\x0d\xbb\xad\x78\xc2\xf7\xcb\xa3\xfe\x69\x1e\x73\x43\xc8\x72\xb7\xf9\xe6\x39\xd3\xab\x93\xea\xb4\x8f\x75\x7a\xc5\x7b\x48\xcd\x49\x40\x88\x4c\x5f\x60\x94\x50\xce\xf1\xdc\xa7\x15\x6b\x43\x87\x6a\x36\x10\xfc\x04\xf1\x16\x3f\x9c\x8f\x72\x17\xeb\x42\xfa\x10\xe9\x2f\x5c\xb3\xb3\x3c\x2e\x1d\xa0\xde\x59\xc7\x85\xf3\x49\xf5\x1a\x33\xc8\x55\xa1\xb9\xd2\xdc\xbe\xa1\x5e\x37\x6f\x3b\xdf\x6d\x97\xe0\xe6\x16\xa2\x68\xfb\x12\xb4\x3d\xff\xee\xdc\xad\xf5\x01\x00\xa8\xfc\x0c\x2e\x70\xeb\xc7\x65\x8a\xef\xdb\x23\x78\x88\xb6\x97\xa2\x8e\x07\x9f\xc3\x15\xbe\x39\x8e\x51\xa2\x39\xf1\x84\x89\x68\xda\x1a\xb6\xf0\x6d\x5a\xb7\x10\xfd\xc6\xb3\xe7\x2e\x16\x0a\x83\x15\x20\x93\x69\x1f\x75\xc9\xb4\xe4\x32\x8b\xa6\x70\x25\xd1\x01\xaa\x61\xa6\x47\x62\xfd\x8e\x29\x2f\xf3\xf0\x68\x5c\xce\x95\x0d\x65\x57\x77\xa1\x8e\x86\xb9\x53\xcb\x5e\x0c\x99\xb6\x9a\xb8\xbf\xeb\x6f\x6a\x2e\x74\xc7\xad\xab\x53\x5b\x18\x5e\xec\x51\x6a\x8d\x56\x2c\x40\xb5\xb3\x2b\x17\xa4\xde\xf9\x14\x3c\xae\x62\x5f\xc9\x63\xca\xee\x90\xfa\x57\xdd\x56\xa7\x55\xf2\x8a\xd4\x3d\x36\x3a\x79\x52\x0d\x80\x31\xc1\x99\x39\xfd\xe0\x7d\x5f\x7a\x9f\xfe\x5a\x32\x00\x7c\xf8\x73\xc9\x80\xc3\xb1\x6f\x26\x43\xc9\x7b\x1f\x4e\xfe\x0d\x00\x00\xff\xff\x74\x5d\xc4\xb5\xa5\x1f\x00\x00"),
+			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xec\x59\x4d\x6f\xe3\x36\x10\xbd\xfb\x57\x10\xda\x1e\xe2\x83\xbd\x45\x8f\x01\x82\x62\x51\xf4\xe3\x90\x16\x45\x16\xe9\xa5\x28\x04\x46\x1a\x2b\x4c\x28\x52\x21\x47\x4e\x0c\x47\xff\xbd\xa0\x24\x4b\xa4\x3e\x6c\x4a\xf1\x5e\x5a\xdf\x6c\x6a\xe6\xcd\xe8\xbd\xe1\x90\x14\xf7\x7b\x12\xc3\x86\x09\x20\x41\x18\x52\x0e\x0a\x53\x2a\x68\x02\x2a\x20\x45\xf1\xc5\xfa\xbf\xdf\x13\x10\x31\x29\x8a\xc5\xa8\xcb\xfd\xdd\xad\xf1\xda\xef\xc9\xfa\xe7\x37\x04\x25\x28\xbf\xbf\xbb\x25\x45\xf1\xf9\xd3\xe7\xd2\x4e\xff\xa8\x20\x02\xb6\x05\x75\x63\x8c\xee\xea\x3f\xe4\x9d\xe4\x8a\xbf\xe4\xa0\x76\x95\x7b\x1d\xc8\x8d\xa4\xf3\x87\x27\x88\xd0\x44\xf8\xdb\x78\x7f\x45\x8a\xb9\x26\xef\x04\xe5\x7d\x96\x81\xaa\x5c\xd9\x86\xc0\x4b\xf3\x30\xd8\x30\xc5\x44\x62\x7c\xae\x8d\x4f\xf9\x42\x7a\xfd\x4b\x39\x4a\xde\x09\x07\x61\x47\xfc\x87\x18\xa3\x5f\x95\xcc\xb3\x5b\xfa\x00\x5c\xaf\xbf\x4a\x85\x10\xff\x49\x99\xd2\xeb\xbf\x28\xcf\xc1\x04\x7c\x92\x4c\x90\x80\x18\x54\x52\x85\x4c\x90\x5c\x19\xac\xf5\x4f\x32\x4d\xa5\xa8\x9c\x97\xf5\x98\x85\xb7\x24\x45\x71\xb5\xdf\x93\x57\x86\x8f\xae\xf1\xfa\x0e\x52\xb9\x05\x37\xfa\x1f\x34\x05\x5d\x33\x3a\x14\xbd\x49\x7c\xd9\xfc\x1a\x91\x29\x06\x1d\x29\x96\x21\x93\x22\x38\xc2\x31\xc2\x1b\x56\x92\x86\x9c\x69\xac\x4d\x15\x15\x09\x90\x35\x29\x8a\x2a\xaf\xeb\x45\x3b\xd8\xe7\xc9\xb0\xb2\x2a\x89\x34\xe9\x9b\x7f\x37\xa4\x79\x81\x3a\xb1\x2a\xf8\x17\x21\x24\x52\x93\x93\x03\x69\x0d\xcf\xc3\xfd\x2a\x73\x15\xc1\x75\x25\x26\x08\x50\x14\xa5\xaa\x2a\x71\x31\x40\xd4\x51\x0a\xc2\x94\xaa\xe7\x58\xbe\x8a\x1e\x17\x0b\x5f\x32\x3c\xb3\x5e\x4c\xa7\xc3\x17\xd9\x8b\x90\xc5\x30\x23\x89\x44\xb6\xd9\xad\x63\xd8\xd0\x9c\xe3\x1a\x19\x72\xa8\xb9\x40\x48\x33\x4e\xd1\x9d\x9d\xeb\xb1\x22\xec\x00\xa5\xa0\x35\x4d\x4a\x28\x63\x55\x4f\x86\x91\x97\x1d\xac\xfe\x45\x67\xee\x39\x93\x7b\x49\xbe\x2f\x39\x2d\xc7\x48\x35\x56\xb2\x6a\x27\xdd\x2b\xf7\x4e\x83\xe8\xd2\x33\x10\xed\x0e\xb4\xe4\x5b\x88\xdd\x78\x87\x51\xff\x88\x07\x0f\x1f\x49\x34\xa7\xd1\xf3\x19\x14\x71\x71\x72\x6d\x3a\x76\x3a\x04\xe5\xae\x0b\x9e\x78\x1b\xca\xf9\x03\x8d\x9e\x7b\x78\x83\xe9\x1b\x50\xf2\x4e\x4e\x19\x72\x26\x9e\xbd\x33\x88\xea\x0c\x58\x1c\xf8\x39\x64\x0a\x8c\x40\x9e\xd6\x56\x42\x47\x19\x2b\x97\x45\xcf\x94\x59\x24\x05\xa4\xf2\x89\x05\xfe\xf6\xb9\xe2\xbe\x19\xfb\xbf\xdc\x46\x4a\xac\x36\x01\x56\x0d\xda\xe6\x99\x79\xb5\x38\xc7\x76\x46\xf7\xd7\x98\x69\xe5\xd8\x47\x8c\x38\x03\x81\xf3\x0b\x72\x0c\xb1\xdd\xa8\xcc\xd3\xac\x8f\xcb\x84\x46\x2a\x22\xd0\x03\xb8\xfd\x39\x3f\xce\xaa\xcc\x74\x02\x82\xc1\x50\x9b\x9c\x4c\x68\x0f\xac\xaf\xd0\xb7\x68\xbb\xab\xf3\xf4\xdd\x95\x7f\xe3\x5d\x9d\xaf\xf3\x5a\x51\x57\x3e\x94\xea\x72\x69\x9d\x5e\x4d\x8e\xea\xaf\x10\x3d\x52\x9c\xaa\xf9\xe2\xa2\xdf\x11\xfd\xec\xb3\xcb\xbd\xe2\x3d\xbc\x41\x7d\x46\x54\xef\xe8\x83\x32\x34\x8b\xe5\x68\x27\xed\x9b\x67\x54\xe1\x6e\x82\x3d\xd2\xc4\xd7\x9a\x26\x20\x30\xec\x2e\x71\x6e\x7d\x6d\x59\x84\x52\xc9\x4c\xb7\x65\x8b\x14\x21\x74\x0b\xed\x52\x4b\xd3\x7a\x41\x9f\x55\x10\xc8\x70\x17\xc6\x4c\x67\x9c\xee\xc2\x91\xdd\xd4\xe9\xc6\xdd\x47\x4e\xa5\x60\x28\x0d\x21\x21\x4a\xc9\x27\x2e\x89\xce\xda\x95\xeb\x47\xb9\x05\x75\x86\xfd\x63\x0f\xea\xdb\xd7\xd3\x7f\x69\x4b\x7f\x8c\xc9\x76\x4f\x37\x65\x4d\xb1\x77\x73\xc2\x9a\xec\xed\x97\x93\xe9\x67\x04\x0b\xe7\x22\xef\xdc\x13\x1b\x02\x87\x44\xd1\x74\xec\xf4\xfb\xbf\x24\x25\x66\x3a\x92\x2a\x6e\xf7\xe6\x52\x60\xbb\xdd\xef\x97\x62\xd7\x7e\x7e\xe3\xea\x22\x5d\xd4\x30\xdb\x8a\x07\x78\xbb\x4c\xf5\x0f\xf3\x98\x6a\x04\x9a\xda\xcd\x37\x4d\xa9\xda\xcd\xaa\xd3\x2e\xd6\xfc\x8a\xef\x21\xd5\x5f\x02\x7c\x64\xfa\x44\x26\x09\x65\x7d\x31\xfd\xb0\x62\x4d\x68\x5f\xcd\x06\x82\xcf\x10\x6f\xfb\xc3\xf9\x28\xb7\xb1\x2e\xa4\x0f\x91\xfe\xc4\x14\x3d\xcb\x74\x71\x80\x3a\xdf\x3a\x2e\x9c\x2f\xca\x63\xcc\x20\x57\x99\x62\x52\x31\x73\x42\x5d\xd5\xa7\x9d\xef\x0e\x43\xe4\xfa\x86\x04\xc1\xe1\x10\x74\xb8\x92\x70\xde\xd6\xf8\x10\x42\x48\xe9\xa7\x61\x0b\x07\x3f\x26\x62\x78\x3b\xdc\x8a\x90\xe0\xf0\x28\x70\x3c\xd8\x86\x5c\xc1\x8b\xe5\x18\x44\x8a\x21\x8b\x28\x0f\x96\x8d\x61\x03\xdf\xa4\x75\x43\x82\xdf\x58\xf2\xe8\x62\x01\xd7\x50\x02\x52\x11\x77\x51\x5f\xa9\x12\x4c\x24\xc1\x92\x5c\x09\xb0\x80\x2a\x98\xe5\x89\x58\xbf\x43\xcc\xf2\xd4\x3f\x1a\x13\x1b\x69\x42\x99\xd1\x36\xd4\xc9\x30\xb7\xf2\xb5\x13\x43\xc4\x8d\x26\xf6\xef\xea\x9a\xd3\x86\x76\xdc\x5c\x9d\x9a\xc2\xe8\xc5\x9e\xa4\xd6\x64\xc5\x3c\x54\x3b\xbb\x72\x5e\xea\x9d\x4f\xc1\xd3\x2a\x76\x95\x3c\xa5\x6c\x8b\xd4\x7d\x6a\xb7\x3a\x25\xa3\x67\x40\xf7\xb3\xd1\xec\x95\x6a\x00\x8c\x72\x46\xf5\xfc\x0f\xef\x63\xe9\x7d\xf8\xb6\x64\x00\xf8\xf8\x75\xc9\x80\xc3\xa9\x3b\x93\xa1\xe4\x7b\x17\x27\xff\x06\x00\x00\xff\xff\x1d\xa2\xc2\x1f\x38\x21\x00\x00"),
 		},
 		"/templates/email.tmpl": &vfsgen۰CompressedFileInfo{
 			name:             "email.tmpl",
diff -u -r -N a/alertmanager/config/config.go b/alertmanager/config/config.go
--- a/alertmanager/config/config.go	2025-03-07 06:04:46.000000000 -0800
+++ b/alertmanager/config/config.go	2025-03-11 20:06:29.557004499 -0700
@@ -262,6 +262,9 @@
 		for _, cfg := range receiver.PushoverConfigs {
 			cfg.HTTPConfig.SetDirectory(baseDir)
 		}
+		for _, cfg := range receiver.GotifyConfigs {
+			cfg.HTTPConfig.SetDirectory(baseDir)
+		}
 		for _, cfg := range receiver.SlackConfigs {
 			cfg.HTTPConfig.SetDirectory(baseDir)
 		}
@@ -449,6 +452,26 @@
 				*ec.RequireTLS = c.Global.SMTPRequireTLS
 			}
 		}
+		for _, gc := range rcv.GotifyConfigs {
+			if gc.HTTPConfig == nil {
+				gc.HTTPConfig = c.Global.HTTPConfig
+			}
+			if gc.GotifyServerURL == nil {
+				if c.Global.GotifyServerURL == nil {
+					return fmt.Errorf("no Gotify server URL provided")
+				}
+				gc.GotifyServerURL = c.Global.GotifyServerURL
+			}
+			if gc.GotifyAppToken == "" {
+				if c.Global.GotifyAppToken == "" {
+					return fmt.Errorf("no Gotify app token provided")
+				}
+				gc.GotifyAppToken = c.Global.GotifyAppToken
+			}
+			if gc.Priority == 0 {
+				gc.Priority = c.Global.GotifyPriority
+			}
+		}
 		for _, sc := range rcv.SlackConfigs {
 			if sc.HTTPConfig == nil {
 				sc.HTTPConfig = c.Global.HTTPConfig
@@ -848,6 +871,9 @@
 	SMTPAuthIdentity      string               `yaml:"smtp_auth_identity,omitempty" json:"smtp_auth_identity,omitempty"`
 	SMTPRequireTLS        bool                 `yaml:"smtp_require_tls" json:"smtp_require_tls,omitempty"`
 	SMTPTLSConfig         *commoncfg.TLSConfig `yaml:"smtp_tls_config,omitempty" json:"smtp_tls_config,omitempty"`
+	GotifyServerURL      *URL       `yaml:"gotify_server_url,omitempty" json:"gotify_api_url,omitempty"`
+	GotifyAppToken       Secret     `yaml:"gotify_app_token,omitempty" json:"gotify_app_token,omitempty"`
+	GotifyPriority       uint32     `yaml:"gotify_priority" json:"gotify_priority,omitempty"`
 	SlackAPIURL           *SecretURL           `yaml:"slack_api_url,omitempty" json:"slack_api_url,omitempty"`
 	SlackAPIURLFile       string               `yaml:"slack_api_url_file,omitempty" json:"slack_api_url_file,omitempty"`
 	PagerdutyURL          *URL                 `yaml:"pagerduty_url,omitempty" json:"pagerduty_url,omitempty"`
@@ -1008,6 +1034,7 @@
 	DiscordConfigs    []*DiscordConfig    `yaml:"discord_configs,omitempty" json:"discord_configs,omitempty"`
 	EmailConfigs      []*EmailConfig      `yaml:"email_configs,omitempty" json:"email_configs,omitempty"`
 	PagerdutyConfigs  []*PagerdutyConfig  `yaml:"pagerduty_configs,omitempty" json:"pagerduty_configs,omitempty"`
+	GotifyConfigs    []*GotifyConfig    `yaml:"gotify_configs,omitempty" json:"gotify_configs,omitempty"`
 	SlackConfigs      []*SlackConfig      `yaml:"slack_configs,omitempty" json:"slack_configs,omitempty"`
 	WebhookConfigs    []*WebhookConfig    `yaml:"webhook_configs,omitempty" json:"webhook_configs,omitempty"`
 	OpsGenieConfigs   []*OpsGenieConfig   `yaml:"opsgenie_configs,omitempty" json:"opsgenie_configs,omitempty"`
diff -u -r -N a/alertmanager/config/notifiers.go b/alertmanager/config/notifiers.go
--- a/alertmanager/config/notifiers.go	2025-03-07 06:04:46.000000000 -0800
+++ b/alertmanager/config/notifiers.go	2025-03-11 20:08:04.739510962 -0700
@@ -82,6 +82,16 @@
 		ClientURL:   `{{ template "pagerduty.default.clientURL" . }}`,
 	}
 
+	// DefaultGotifyConfig defines default values for Gotify configurations.
+	DefaultGotifyConfig = GotifyConfig{
+		NotifierConfig: NotifierConfig{
+			VSendResolved: true,
+		},
+		Title:       `{{ template "gotify.default.title" . }}`,
+		Message:     `{{ template "gotify.default.message" . }}`,
+		Priority:    5,
+	}
+
 	// DefaultSlackConfig defines default values for Slack configurations.
 	DefaultSlackConfig = SlackConfig{
 		NotifierConfig: NotifierConfig{
@@ -389,6 +399,30 @@
 	return nil
 }
 
+// GotifyConfig configures notifications via Gotify.
+type GotifyConfig struct {
+	NotifierConfig `yaml:",inline" json:",inline"`
+
+	HTTPConfig      *commoncfg.HTTPClientConfig `yaml:"http_config,omitempty" json:"http_config,omitempty"`
+	GotifyServerURL *URL                        `yaml:"gotify_server_url,omitempty" json:"gotify_server_url,omitempty"`
+	GotifyAppToken  Secret                      `yaml:"gotify_app_token,omitempty" json:"gotify_app_token,omitempty"`
+
+	Title    string `yaml:"title,omitempty" json:"title,omitempty"`
+	Message  string `yaml:"message,omitempty" json:"message,omitempty"`
+	Priority uint32 `yaml:priority,omitempty" json:"priority,omitempty"`
+}
+
+// UnmarshalYAML implements the yaml.Unmarshaler interface.
+func (c *GotifyConfig) UnmarshalYAML(unmarshal func(interface{}) error) error {
+	*c = DefaultGotifyConfig
+	type plain GotifyConfig
+	if err := unmarshal((*plain)(c)); err != nil {
+		return err
+	}
+
+	return nil
+}
+
 // SlackAction configures a single Slack action that is sent with each notification.
 // See https://api.slack.com/docs/message-attachments#action_fields and https://api.slack.com/docs/message-buttons
 // for more information.
diff -u -r -N a/alertmanager/config/receiver/receiver.go b/alertmanager/config/receiver/receiver.go
--- a/alertmanager/config/receiver/receiver.go	2025-03-07 06:04:46.000000000 -0800
+++ b/alertmanager/config/receiver/receiver.go	2025-03-11 20:22:09.533122356 -0700
@@ -23,6 +23,7 @@
 	"github.com/prometheus/alertmanager/notify"
 	"github.com/prometheus/alertmanager/notify/discord"
 	"github.com/prometheus/alertmanager/notify/email"
+	"github.com/prometheus/alertmanager/notify/gotify"
 	"github.com/prometheus/alertmanager/notify/jira"
 	"github.com/prometheus/alertmanager/notify/msteams"
 	"github.com/prometheus/alertmanager/notify/msteamsv2"
@@ -76,6 +77,9 @@
 	for i, c := range nc.WechatConfigs {
 		add("wechat", i, c, func(l *slog.Logger) (notify.Notifier, error) { return wechat.New(c, tmpl, l, httpOpts...) })
 	}
+	for i, c := range nc.GotifyConfigs {
+		add("gotify", i, c, func(l *slog.Logger) (notify.Notifier, error) { return gotify.New(c, tmpl, l, httpOpts...) })
+	}
 	for i, c := range nc.SlackConfigs {
 		add("slack", i, c, func(l *slog.Logger) (notify.Notifier, error) { return slack.New(c, tmpl, l, httpOpts...) })
 	}
diff -u -r -N a/alertmanager/notify/gotify/gotify.go b/alertmanager/notify/gotify/gotify.go
--- a/alertmanager/notify/gotify/gotify.go	1969-12-31 16:00:00.000000000 -0800
+++ b/alertmanager/notify/gotify/gotify.go	2025-03-11 20:22:29.557609374 -0700
@@ -0,0 +1,157 @@
+// Copyright 2019 Prometheus Team
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+// http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package gotify
+
+import (
+	"bytes"
+	"context"
+	"encoding/json"
+	"fmt"
+	"io"
+	"log/slog"
+	"net/http"
+
+	commoncfg "github.com/prometheus/common/config"
+
+	"github.com/prometheus/alertmanager/config"
+	"github.com/prometheus/alertmanager/notify"
+	"github.com/prometheus/alertmanager/template"
+	"github.com/prometheus/alertmanager/types"
+)
+
+const (
+	maxTitleLenRunes = 256
+	maxMessageLenRunes = 65536
+)
+
+// Notifier implements a Notifier for Gotify notifications.
+type Notifier struct {
+	conf    *config.GotifyConfig
+	tmpl    *template.Template
+	logger  *slog.Logger
+	client  *http.Client
+	retrier *notify.Retrier
+	gotifyServerURL *config.URL
+	gotifyAppToken config.Secret
+}
+
+// New returns a new Gotify notification handler.
+func New(c *config.GotifyConfig, t *template.Template, l *slog.Logger, httpOpts ...commoncfg.HTTPClientOption) (*Notifier, error) {
+	client, err := commoncfg.NewClientFromConfig(*c.HTTPConfig, "gotify", httpOpts...)
+	if err != nil {
+		return nil, err
+	}
+
+	return &Notifier{
+		conf:         c,
+		tmpl:         t,
+		logger:       l,
+		client:       client,
+		retrier:      &notify.Retrier{},
+		gotifyServerURL: c.GotifyServerURL,
+		gotifyAppToken: c.GotifyAppToken,
+	}, nil
+}
+
+// request is the request for sending a slack notification.
+type request struct {
+	Title     string       `json:"title,omitempty"`
+	Message   string       `json:"message,omitempty"`
+	Priority  uint32       `json:"priority,omitempty"`
+	Extras    GotifyExtras `json:"extras,omitempty"`
+}
+
+type GotifyExtras struct {
+	ClientDisplay GotifyClientDisplay     `json:"client::display,omitempty"`
+}
+
+type GotifyClientDisplay struct {
+	ContentType string     `json:"contentType,omitempty"`
+}
+
+// Notify implements the Notifier interface.
+func (n *Notifier) Notify(ctx context.Context, as ...*types.Alert) (bool, error) {
+	key, err := notify.ExtractGroupKey(ctx)
+	if err != nil {
+		return false, err
+	}
+
+	n.logger.Debug("incident", key)
+
+	data := notify.GetTemplateData(ctx, n.tmpl, as, n.logger)
+	tmpl := notify.TmplText(n.tmpl, data, &err)
+	if err != nil {
+		return false, err
+	}
+
+	title, truncated := notify.TruncateInRunes(tmpl(n.conf.Title), maxTitleLenRunes)
+	if err != nil {
+		return false, err
+	}
+	if truncated {
+		n.logger.Warn("msg", "Truncated title", "key", key, "max_runes", maxTitleLenRunes)
+	}
+	message, truncated := notify.TruncateInRunes(tmpl(n.conf.Message), maxMessageLenRunes)
+	if err != nil {
+		return false, err
+	}
+	if truncated {
+		n.logger.Warn("msg", "Truncated message", "key", key, "max_runes", maxMessageLenRunes)
+	}
+
+	var url string
+	if n.conf.GotifyServerURL != nil {
+		url = fmt.Sprintf("%s/message?token=%s", n.conf.GotifyServerURL.String(), n.conf.GotifyAppToken)
+	} else {
+		return false, fmt.Errorf("Gotify server URL is nil")
+	}
+
+	r := request{
+		Title:       title,
+		Message:	 message,
+		Priority:    n.conf.Priority,
+		Extras: GotifyExtras{
+			ClientDisplay: GotifyClientDisplay{
+				ContentType: "text/markdown",
+			},
+		},
+	}
+
+	var payload bytes.Buffer
+	if err = json.NewEncoder(&payload).Encode(r); err != nil {
+		return false, err
+	}
+
+	resp, err := postJSONToGotify(ctx, n.client, url, n.conf.GotifyAppToken, &payload)
+	if err != nil {
+		return true, notify.RedactURL(err)
+	}
+
+	shouldRetry, err := n.retrier.Check(resp.StatusCode, resp.Body)
+	if err != nil {
+		return shouldRetry, err
+	}
+	return false, nil
+}
+
+func postJSONToGotify(ctx context.Context, client *http.Client, url string, token config.Secret, body io.Reader) (*http.Response, error) {
+	req, err := http.NewRequest(http.MethodPost, url, body)
+	if err != nil {
+		return nil, err
+	}
+	req.Header.Set("User-Agent", notify.UserAgentHeader)
+	req.Header.Set("Content-Type", "application/json")
+	req.Header.Set("X-Gotify-Key", string(token))
+	return client.Do(req.WithContext(ctx))
+}
diff -u -r -N a/alertmanager/notify/notify.go b/alertmanager/notify/notify.go
--- a/alertmanager/notify/notify.go	2025-03-07 06:04:46.000000000 -0800
+++ b/alertmanager/notify/notify.go	2025-03-11 20:22:38.493827113 -0700
@@ -355,6 +355,7 @@
 		"pagerduty",
 		"wechat",
 		"pushover",
+		"gotify",
 		"slack",
 		"opsgenie",
 		"webhook",
diff -u -r -N a/alertmanager/template/default.tmpl b/alertmanager/template/default.tmpl
--- a/alertmanager/template/default.tmpl	2025-03-07 06:04:46.000000000 -0800
+++ b/alertmanager/template/default.tmpl	2025-03-11 20:12:04.521824980 -0700
@@ -22,6 +22,19 @@
 {{ end }}
 {{ end }}
 
+{{ define "gotify.default.title" }}{{ template "__subject" . }}{{ end }}
+{{ define "gotify.default.message" }}
+{{ .CommonAnnotations.SortedPairs.Values | join " " }}
+{{ if gt (len .Alerts.Firing) 0 }}
+Alerts Firing:
+{{ template "__text_alert_list" .Alerts.Firing }}
+{{ end }}
+{{ if gt (len .Alerts.Resolved) 0 }}
+Alerts Resolved:
+{{ template "__text_alert_list" .Alerts.Resolved }}
+{{ end }}
+{{ end }}
+
 {{ define "slack.default.title" }}{{ template "__subject" . }}{{ end }}
 {{ define "slack.default.username" }}{{ template "__alertmanager" . }}{{ end }}
 {{ define "slack.default.fallback" }}{{ template "slack.default.title" . }} | {{ template "slack.default.titlelink" . }}{{ end }}
